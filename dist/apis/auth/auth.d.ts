import { QueryParams } from '../base';
import { User, Push } from '../../models';
import { SignUp, SignIn, RequestResetPassword, CreatePassword, UpdatePassword, FavoriteService, VerifyAccessToken } from './types';
declare function signUp(data: SignUp): Promise<User>;
declare function signIn(data: SignIn): Promise<User>;
declare function signInWithGoogle(): Promise<any>;
declare function signInWithFacebook(): Promise<any>;
declare function signOut(): Promise<any>;
declare function verifyAccessToken(data: VerifyAccessToken): Promise<User>;
declare function createPassword(data: CreatePassword): Promise<User>;
declare function updatePassword(data: UpdatePassword): Promise<User>;
declare function requestResetPassword(data: RequestResetPassword): Promise<any>;
declare function getUserProfile(queryParams?: QueryParams): Promise<User>;
declare function updateUserProfile(payload: User): Promise<User>;
declare function addFavoriteEvent(data: FavoriteService): Promise<any>;
declare function removeFavoriteEvent(data: FavoriteService): Promise<any>;
declare function registerDevice(payload: Push): Promise<User>;
declare function delDevice(payload: Push): Promise<User>;
declare function reportNotifications(): Promise<any>;
declare const _default: {
    signUp: typeof signUp;
    signIn: typeof signIn;
    signOut: typeof signOut;
    createPassword: typeof createPassword;
    updatePassword: typeof updatePassword;
    requestResetPassword: typeof requestResetPassword;
    getUserProfile: typeof getUserProfile;
    updateUserProfile: typeof updateUserProfile;
    addFavoriteEvent: typeof addFavoriteEvent;
    removeFavoriteEvent: typeof removeFavoriteEvent;
    signInWithGoogle: typeof signInWithGoogle;
    signInWithFacebook: typeof signInWithFacebook;
    verifyAccessToken: typeof verifyAccessToken;
    registerDevice: typeof registerDevice;
    delDevice: typeof delDevice;
    reportNotifications: typeof reportNotifications;
};
export default _default;
export { signUp, signIn, signOut, createPassword, updatePassword, requestResetPassword, getUserProfile, updateUserProfile, addFavoriteEvent, removeFavoriteEvent, signInWithGoogle, signInWithFacebook, verifyAccessToken, registerDevice, delDevice, reportNotifications, };
